{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userName","picturesPaths","picturesTitles","selectedfiles","inputValue","selectImageHandler","e","_this","setState","target","files","uploadHandler","metadata","contentType","storageRef","firebase","storage","ref","filesArr","Object","toConsumableArray","console","log","forEach","file","i","uploadTask","child","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","Math","round","error","code","pictureTitle","replace","getDownloadURL","then","downloadURL","database","set","path","selectYes","selectMaybe","selectNot","setDataHandler","value","sendDataHandler","_this2","this","userNameDbElement","isUserNameDbElementFirstUpdate","keys","val","prop","picturePath","push","images","imagesArr","reduce","sum","current","img","filter","image","RegExp","test","concat","defineProperty","map","element","react_default","a","createElement","key","style","width","margin","src","values","alt","className","type","onChange","onClick","multiple","display","alignItems","justifyContent","flexWrap","Component","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef5801fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import * as firebase from 'firebase';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tuserName: 'Marcin',\n\t\tpicturesPaths: [],\n\t\tpicturesTitles: [],\n\t\tselectedfiles: null,\n\t\tinputValue: ''\n\t};\n\n\tcomponentDidMount() {\n\t\tconst userNameDbElement = firebase.database().ref().child(this.state.userName);\n\t\tlet isUserNameDbElementFirstUpdate = firebase.database().ref().child('fik');\n\t\tconsole.log('db', isUserNameDbElementFirstUpdate);\n\n\t\tuserNameDbElement.on('value', (snapshot) => {\n\t\t\tconst picturesTitles = Object.keys(snapshot.val());\n\t\t\tconst picturesPaths = [];\n\t\t\tfor (const prop in snapshot.val()) {\n\t\t\t\tconst picturePath = snapshot.val()[prop].path;\n\t\t\t\tpicturesPaths.push(picturePath);\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tpicturesTitles: picturesTitles,\n\t\t\t\tpicturesPaths: picturesPaths\n\t\t\t});\n\t\t});\n\t}\n\n\tselectImageHandler = (e) => {\n\t\tthis.setState({ selectedfiles: e.target.files });\n\t};\n\n\tuploadHandler = () => {\n\t\tconst files = this.state.selectedfiles;\n\t\tconst metadata = {\n\t\t\tcontentType: 'image/jpeg'\n\t\t};\n\n\t\tconst storageRef = firebase.storage().ref();\n\t\tconst filesArr = [ ...files ];\n\t\tconsole.log(filesArr);\n\n\t\tfilesArr.forEach((file, i) => {\n\t\t\tconst uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\n\t\t\tuploadTask.on(\n\t\t\t\tfirebase.storage.TaskEvent.STATE_CHANGED,\n\t\t\t\t(snapshot) => {\n\t\t\t\t\tconst progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n\t\t\t\t\tconsole.log('Upload (' + i + ') is: ' + Math.round(progress) + '%');\n\t\t\t\t\t// console.log('snap', snapshot.ref.name);\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tswitch (error.code) {\n\t\t\t\t\t\tcase 'storage/unauthorized':\n\t\t\t\t\t\t\tconsole.log('No permission');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'storage/canceled':\n\t\t\t\t\t\t\tconsole.log('Stopped upload');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'storage/unknown':\n\t\t\t\t\t\t\tconsole.log('Unknown error');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tconst pictureTitle = uploadTask.snapshot.ref.name.replace('.jpg', '');\n\t\t\t\t\tconsole.log(pictureTitle);\n\n\t\t\t\t\tuploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n\t\t\t\t\t\tfirebase.database().ref(this.state.userName + '/').child(pictureTitle).set({\n\t\t\t\t\t\t\tpath: downloadURL,\n\t\t\t\t\t\t\tselectYes: false,\n\t\t\t\t\t\t\tselectMaybe: false,\n\t\t\t\t\t\t\tselectNot: false\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t};\n\n\tsetDataHandler = (e) => {\n\t\tthis.setState({ inputValue: e.target.value });\n\t};\n\n\tsendDataHandler = () => {\n\t\tfirebase.database().ref('marcin/').child(this.state.inputValue).set({\n\t\t\tpath: 'link to picture',\n\t\t\tselectYes: false,\n\t\t\tselectMaybe: false,\n\t\t\tselectNot: false\n\t\t});\n\t};\n\n\trender() {\n\t\tconst images = this.state.picturesPaths;\n\t\tconst titles = this.state.picturesTitles;\n\n\t\tconst imageTitleObj = titles.reduce((sum, current) => {\n\t\t\tconst img = images.filter((image) => {\n\t\t\t\tlet patt = new RegExp(current, 'g');\n\t\t\t\treturn patt.test(image);\n\t\t\t});\n\t\t\treturn sum.concat({ [current]: img[0] });\n\t\t}, []);\n\n\t\tconst imagesArr = imageTitleObj.map((element) => {\n\t\t\treturn (\n\t\t\t\t<figure key={Object.keys(element)}>\n\t\t\t\t\t<img style={{ width: '200px', margin: '20px' }} src={Object.values(element)} alt=\"pic\" />\n\t\t\t\t\t<figcaption>{Object.keys(element)}</figcaption>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>{this.state.userName}</h1>\n\t\t\t\t<input type=\"text\" value={this.state.inputValue} onChange={this.setDataHandler} />\n\t\t\t\t<button onClick={this.sendDataHandler}>Send data</button>\n\t\t\t\t<input type=\"file\" multiple onChange={this.selectImageHandler} />\n\t\t\t\t<button onClick={this.uploadHandler}>Upload</button>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '90%',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\tflexWrap: 'wrap'\n\t\t\t\t\t\t// flexDirection: 'row'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{imagesArr}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n\tapiKey: 'AIzaSyB05MIkrZq52LQIiRrC1nFsUp7hkBG3odc',\n\tauthDomain: 'upload-images-69afc.firebaseapp.com',\n\tdatabaseURL: 'https://upload-images-69afc.firebaseio.com',\n\tprojectId: 'upload-images-69afc',\n\tstorageBucket: 'upload-images-69afc.appspot.com',\n\tmessagingSenderId: '419462563824'\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}