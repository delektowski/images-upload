{"version":3,"sources":["components/Button/Button.js","components/ImageContainer/ImageContainer.js","components/Image/Image.js","components/ImagesGenerator/ImagesGenerator.js","containers/Uploader/Uploader.js","App.js","serviceWorker.js","index.js","components/ImageContainer/ImageContainer.module.scss","components/Image/Image.module.scss","components/Button/Button.module.scss","containers/Uploader/Uploader.module.scss"],"names":["Button","props","react_default","a","createElement","onClick","clicked","className","classes","buttonColor","join","buttonText","imageContainer","ImageContainer","containerColor","ImageContainer__green","ImageContainer__blue","ImageContainer__red","children","Image","state","buttonGreenClicked","buttonBlueClicked","buttonRedClicked","buttonClickHandler","_this","setState","_this2","this","Fragment","src","alt","caption","Image__title","Image__selectionButtons","components_Button_Button","Component","imagesGenerator","images","titles","picturesDataObj","imagesArr","reduce","sum","current","img","filter","image","RegExp","test","concat","Object","defineProperty","map","element","components_Image_Image","key","keys","values","Uploader","userName","picturesPaths","picturesTitles","pictureDataObj","selectedfiles","inputValue","selectImageHandler","e","target","files","uploadHandler","metadata","contentType","storageRef","firebase","storage","ref","toConsumableArray","forEach","file","i","uploadTask","child","name","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","console","log","Math","round","error","code","pictureTitle","replace","getDownloadURL","then","downloadURL","database","set","path","selectYes","selectMaybe","selectNot","val","prop","picturePath","push","type","multiple","onChange","Uploader__imagesContainer","ImagesGenerator","App","containers_Uploader_Uploader","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","Button__green","Button__blue","Button__red"],"mappings":"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","file":"static/js/main.8b386e97.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Button.module.scss';\n\nconst Button = (props) => {\n\treturn (\n\t\t<button onClick={props.clicked} className={[ classes.Button, classes[props.buttonColor] ].join(' ')}>\n\t\t\t{props.buttonText}\n\t\t</button>\n\t);\n};\n\nexport default Button;\n","import React from 'react';\nimport classes from './ImageContainer.module.scss';\n\nconst imageContainer = (props) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={[\n\t\t\t\tclasses.ImageContainer,\n\t\t\t\tprops.containerColor === 'green' ? classes.ImageContainer__green : null,\n\t\t\t\tprops.containerColor === 'blue' ? classes.ImageContainer__blue : null,\n\t\t\t\tprops.containerColor === 'red' ? classes.ImageContainer__red : null\n\t\t\t].join(' ')}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default imageContainer;\n","import React, { Component } from 'react';\nimport classes from './Image.module.scss';\nimport Button from '../../components/Button/Button';\nimport ImageContainer from '../ImageContainer/ImageContainer';\n\nclass Image extends Component {\n\tstate = {\n\t\tbuttonGreenClicked: false,\n\t\tbuttonBlueClicked: false,\n\t\tbuttonRedClicked: false,\n\t\tcontainerColor: ''\n\t};\n\n\tcomponentDidMount() {\n\t\t// const picturesDataObjIterable = Object.entries(this.props.picturesDataObj);\n\t\t// picturesDataObjIterable.forEach((element) => {\n\t\t// \tif (element[0] === this.props.caption[0]) {\n\t\t// \t\tconsole.log('jest');\n\t\t// \t}\n\t\t// });\n\t}\n\n\tbuttonClickHandler = (buttonColor) => {\n\t\tswitch (buttonColor) {\n\t\t\tcase 'green':\n\t\t\t\tthis.setState({ containerColor: 'green' });\n\t\t\t\tbreak;\n\t\t\tcase 'blue':\n\t\t\t\tthis.setState({ containerColor: 'blue' });\n\t\t\t\tbreak;\n\t\t\tcase 'red':\n\t\t\t\tthis.setState({ containerColor: 'red' });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<ImageContainer containerColor={this.state.containerColor}>\n\t\t\t\t\t<figure>\n\t\t\t\t\t\t<img className={classes.Image} src={this.props.src} alt={this.props.caption[0]} />\n\t\t\t\t\t\t<figcaption className={classes.Image__title}>{this.props.caption[0]}</figcaption>\n\t\t\t\t\t</figure>\n\t\t\t\t\t<div className={classes.Image__selectionButtons}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclicked={() => this.buttonClickHandler('green')}\n\t\t\t\t\t\t\tbuttonText=\"Tak\"\n\t\t\t\t\t\t\tbuttonColor=\"Button__green\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclicked={() => this.buttonClickHandler('blue')}\n\t\t\t\t\t\t\tbuttonText=\"MoÅ¼e\"\n\t\t\t\t\t\t\tbuttonColor=\"Button__blue\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclicked={() => this.buttonClickHandler('red')}\n\t\t\t\t\t\t\tbuttonText=\"Nie\"\n\t\t\t\t\t\t\tbuttonColor=\"Button__red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</ImageContainer>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Image;\n","import React from 'react';\nimport Image from '../Image/Image';\n\nconst imagesGenerator = (props) => {\n\tconst images = props.images;\n\tconst titles = props.titles;\n\tconst picturesDataObj = props.picturesDataObj;\n\n\t// Link picture title with exact picture file\n\tconst imageTitleObj = titles.reduce((sum, current) => {\n\t\tconst img = images.filter((image) => {\n\t\t\tlet patt = new RegExp(current, 'g');\n\t\t\treturn patt.test(image);\n\t\t});\n\t\treturn sum.concat({ [current]: img[0] });\n\t}, []);\n\n\tconst imagesArr = imageTitleObj.map((element) => {\n\t\treturn (\n\t\t\t<Image\n\t\t\t\tkey={Object.keys(element)}\n\t\t\t\tsrc={Object.values(element)}\n\t\t\t\tcaption={Object.keys(element)}\n\t\t\t\tpicturesDataObj={picturesDataObj}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn <React.Fragment>{imagesArr}</React.Fragment>;\n};\n\nexport default imagesGenerator;\n","import React, { Component } from 'react';\nimport ImagesGenerator from '../../components/ImagesGenerator/ImagesGenerator';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\nimport classes from './Uploader.module.scss';\n\nclass Uploader extends Component {\n\tstate = {\n\t\tuserName: 'Marcin',\n\t\tpicturesPaths: [],\n\t\tpicturesTitles: [],\n\t\tpictureDataObj: null,\n\t\tselectedfiles: null,\n\t\tinputValue: ''\n\t};\n\n\tcomponentDidMount() {\n\t\tconst userNameDbElement = firebase.database().ref().child(this.state.userName);\n\n\t\tuserNameDbElement.on('value', (snapshot) => {\n\t\t\tconst picturesTitles = Object.keys(snapshot.val());\n\t\t\tconst picturesPaths = [];\n\t\t\tconst picturesDataObj = snapshot.val();\n\t\t\tfor (const prop in snapshot.val()) {\n\t\t\t\tconst picturePath = snapshot.val()[prop].path;\n\t\t\t\tpicturesPaths.push(picturePath);\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tpicturesTitles: picturesTitles,\n\t\t\t\tpicturesPaths: picturesPaths,\n\t\t\t\tpicturesDataObj: picturesDataObj\n\t\t\t});\n\t\t});\n\t}\n\n\tselectImageHandler = (e) => {\n\t\tthis.setState({ selectedfiles: e.target.files });\n\t};\n\n\tuploadHandler = () => {\n\t\tconst files = this.state.selectedfiles;\n\t\tconst metadata = {\n\t\t\tcontentType: 'image/jpeg'\n\t\t};\n\n\t\tconst storageRef = firebase.storage().ref();\n\t\tconst filesArr = [ ...files ];\n\n\t\tfilesArr.forEach((file, i) => {\n\t\t\tconst uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\n\t\t\tuploadTask.on(\n\t\t\t\tfirebase.storage.TaskEvent.STATE_CHANGED,\n\t\t\t\t(snapshot) => {\n\t\t\t\t\tconst progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n\t\t\t\t\tconsole.log('Upload (' + i + ') is: ' + Math.round(progress) + '%');\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tswitch (error.code) {\n\t\t\t\t\t\tcase 'storage/unauthorized':\n\t\t\t\t\t\t\tconsole.log('No permission');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'storage/canceled':\n\t\t\t\t\t\t\tconsole.log('Stopped upload');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'storage/unknown':\n\t\t\t\t\t\t\tconsole.log('Unknown error');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tconst pictureTitle = uploadTask.snapshot.ref.name.replace('.jpg', '');\n\t\t\t\t\tconsole.log(pictureTitle);\n\n\t\t\t\t\tuploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n\t\t\t\t\t\tfirebase.database().ref(this.state.userName + '/').child(pictureTitle).set({\n\t\t\t\t\t\t\tpath: downloadURL,\n\t\t\t\t\t\t\tselectYes: false,\n\t\t\t\t\t\t\tselectMaybe: false,\n\t\t\t\t\t\t\tselectNot: false\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={classes.Uploader}>\n\t\t\t\t<h1>{this.state.userName}</h1>\n\t\t\t\t<input type=\"file\" multiple onChange={this.selectImageHandler} />\n\t\t\t\t<button onClick={this.uploadHandler}>Upload</button>\n\t\t\t\t<div className={classes.Uploader__imagesContainer}>\n\t\t\t\t\t<ImagesGenerator\n\t\t\t\t\t\timages={this.state.picturesPaths}\n\t\t\t\t\t\ttitles={this.state.picturesTitles}\n\t\t\t\t\t\tpicturesDataObj={this.state.picturesDataObj}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Uploader;\n","import React, { Component } from 'react';\nimport Uploader from './containers/Uploader/Uploader';\n\nclass App extends Component {\n\trender() {\n\t\treturn <Uploader />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n\tapiKey: 'AIzaSyB05MIkrZq52LQIiRrC1nFsUp7hkBG3odc',\n\tauthDomain: 'upload-images-69afc.firebaseapp.com',\n\tdatabaseURL: 'https://upload-images-69afc.firebaseio.com',\n\tprojectId: 'upload-images-69afc',\n\tstorageBucket: 'upload-images-69afc.appspot.com',\n\tmessagingSenderId: '419462563824'\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageContainer\":\"ImageContainer_ImageContainer__3h35j\",\"ImageContainer__green\":\"ImageContainer_ImageContainer__green__3X58B\",\"ImageContainer__blue\":\"ImageContainer_ImageContainer__blue__3NS-X\",\"ImageContainer__red\":\"ImageContainer_ImageContainer__red__27ku3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Image\":\"Image_Image__32NJ5\",\"Image__title\":\"Image_Image__title__mJyad\",\"Image__selectionButtons\":\"Image_Image__selectionButtons__34cpW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__chNl1\",\"Button__green\":\"Button_Button__green__2BtT-\",\"Button__blue\":\"Button_Button__blue__1SR39\",\"Button__red\":\"Button_Button__red__2b8Pk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Uploader\":\"Uploader_Uploader__39k2Q\",\"Uploader__imagesContainer\":\"Uploader_Uploader__imagesContainer__2bLa3\"};"],"sourceRoot":""}